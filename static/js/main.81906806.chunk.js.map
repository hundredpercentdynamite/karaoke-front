{"version":3,"sources":["network/httpClient.ts","components/SongList/SongCard.tsx","utils/reducer.ts","App/store.ts","components/SongList/index.tsx","network/apiCalls.ts","components/SongPage/assets/volume.svg","utils/interactionEvent.ts","components/SongPage/index.tsx","App/App.tsx","App/GlobalStyle.tsx","reportWebVitals.ts","index.tsx","components/SongList/styles.module.scss"],"names":["baseURL","instance","get","url","a","Promise","reject","console","log","this","axios","create","process","SongCard","props","imageSrc","title","focused","id","index","onSongChoose","history","useHistory","className","styles","song_card","scaleOnFocus","onClick","push","src","alt","ratio","defaultProps","createReducer","obj","reducerMap","actions","Object","keys","reduce","acc","key","type","payload","reducer","state","action","setSongs","songs","SongList","memo","dispatch","appState","assistantRef","appActions","useEffect","http","fetchData","then","data","isSberbox","isSberBox","delay","longDelay","useRemoteHandlers","initialIndex","axis","min","max","length","setIndex","sendData","action_id","as","Row","animatedScrollByIndex","scrollSnapType","detectActive","detectThreshold","onIndexChange","i","paddingStart","paddingEnd","style","paddingTop","paddingBottom","scrollAlign","map","song","scrollSnapAlign","size","image_link","_id","INTER_EVENT_TYPE","useInteractionListener","listener","window","addEventListener","removeEventListener","defaultSongPageState","audio_link","lyrics","isLoading","isPlaying","volume","setSong","setPlayingFlag","setLoadingFlag","setVolume","SongPage","songId","useParams","audioRef","useRef","lyricsRef","rabbitInst","useReducer","onPlay","current","play","event","detail","fetchSong","finally","RabbitLyrics","setLyrics","replaceAll","imageClickHandler","pause","controlButtonClassName","imgBackground","background","showRemove","value","step","disabled","onChange","level","onRemove","volumeIcon","width","height","tabIndex","outlined","controls","ref","onEnded","data-media","data-view-mode","App","appReducer","assistantStateRef","getState","createAssistant","on","interaction","system","navigation","command","dispatchEvent","CustomEvent","dispatchInteractionEvent","goBack","item_selector","items","number","songPageMatch","useRouteMatch","isSongPage","Boolean","params","headerTitle","find","back","onBackClick","path","component","exact","DocumentStyle","createGlobalStyle","text","gradient","ThemeStyle","darkSber","GlobalStyle","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","Device","theme","lightJoy","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.81906806.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios';\n\nexport interface HttpClientI {\n  get: <T>(url: string) => Promise<AxiosResponse<T>>;\n}\n\nexport class HttpClient implements HttpClientI {\n  constructor(baseURL?: string) {\n    console.log('baseURL', baseURL);\n    this.instance = axios.create({ baseURL });\n  }\n  private instance;\n  get = async <T>(url: string): Promise<AxiosResponse<T>> => {\n    try {\n      return await this.instance.get<T>(url);\n    } catch (e) {\n      return Promise.reject();\n    }\n  }\n}\n\nexport default new HttpClient(process.env.REACT_APP_API_URL);\n","import React from 'react';\nimport { Card, CardBody, CardContent, CardMedia, CardHeadline2 } from '@sberdevices/plasma-ui';\nimport { useHistory } from 'react-router-dom';\nimport styles from \"./styles.module.scss\";\nexport type SongCardProps = Readonly<{\n  imageSrc: string;\n  title: string;\n  focused: boolean;\n  id: string;\n  index: number;\n  onSongChoose: Function;\n}>;\n\nconst SongCard = (props: SongCardProps) => {\n  const { imageSrc, title, focused, id, index, onSongChoose } = props;\n  const history = useHistory();\n  const clickHandler = () => {\n    history.push(`/song/${id}`);\n    onSongChoose();\n  }\n  return (\n      <Card focused={focused} className={styles.song_card} scaleOnFocus onClick={clickHandler}>\n        <CardBody>\n          <CardMedia src={imageSrc} alt={title} ratio=\"1/1\" />\n          <CardContent>\n            <CardHeadline2>\n              {index}.&nbsp;\n              {title}\n            </CardHeadline2>\n          </CardContent>\n        </CardBody>\n      </Card>\n  );\n};\n\nSongCard.defaultProps = {\n\n};\n\nexport default SongCard;","export type ObjectAnyKey = Record<string, any>;\nexport type State<T> = T;\n\nexport type MappedReducer<T> = (state: State<T>, payload: any) => State<T>;\nexport type ReducersMap<T> = {\n  [key: string]: MappedReducer<T>;\n}\n\nexport type ActionCreator = (type: string) => (payload: any) => Action;\nexport type Action = {\n  type: string;\n  payload: any;\n}\nexport type ActionsMap = {\n  [key: string]: (payload: any) => Action;\n}\n\n\nexport type Reducer<T> = (state: State<T>, action: Action) => State<T>;\nexport type CreatedReducers<T> = {\n  reducer: Reducer<T>;\n  actions: ActionsMap,\n}\n\n\n\n\nexport const createAction: ActionCreator = (type: string) => {\n  return (payload) => {\n    return {\n      type,\n      payload,\n    };\n  };\n};\n\n\nexport function createReducer<T>(obj: ReducersMap<T>): CreatedReducers<T> {\n  const reducerMap: ReducersMap<T> = { ...obj };\n  const actionsMap: ActionsMap = Object.keys(reducerMap).reduce((acc, key) => {\n    return {\n      ...acc,\n      [key]: createAction(key),\n    };\n  }, {});\n\n  const reducer = (state: State<T>, action: Action) => {\n    return reducerMap[action.type](state, action.payload);\n  };\n\n  return { actions: actionsMap, reducer };\n}\n\n\n\nexport function setIn<S>(data: S, path: Array<string>, value: any): S | any {\n  let modifiedData;\n  if (Array.isArray(data)) {\n    modifiedData = [...data];\n  } else {\n    modifiedData = { ...data };\n  }\n  let currentItem: any = modifiedData;\n  path.forEach((key, index) => {\n    if (index === path.length - 1) {\n      currentItem[key] = value;\n    } else {\n      if (!currentItem[key]) {\n        currentItem[key] = {};\n      }\n\n      currentItem = currentItem[key];\n    }\n  });\n\n  return modifiedData;\n}\n\nexport function getIn<S>(data: S, path: Array<string>) : any {\n  let modifiedData;\n  if (Array.isArray(data)) {\n    modifiedData = [...data];\n  } else {\n    modifiedData = { ...data };\n  }\n  let currentItem: any = modifiedData;\n  path.forEach((key) => {\n    if (!currentItem[key]) {\n      currentItem = '';\n      return;\n    }\n\n    currentItem = currentItem[key];\n  });\n\n  return currentItem;\n}\n","import { SongDTO } from '../models/songs';\nimport { createReducer } from '../utils/reducer';\n\nexport type AppState = {\n  songs: Array<SongDTO>;\n};\n\nconst { actions, reducer } = createReducer<AppState>({\n  setSongs: (state, payload) => {\n    return {\n      ...state,\n      songs: payload,\n    };\n  }\n});\n\nexport {\n  actions as appActions,\n  reducer as appReducer,\n};","import React, {\n  memo,\n  useEffect,\n} from 'react';\nimport { fetchSongList } from '../../network/apiCalls';\nimport {\n  Carousel,\n  CarouselGridWrapper,\n  Row,\n  Container,\n  useRemoteHandlers,\n  CarouselCol,\n} from '@sberdevices/plasma-ui';\nimport { isSberBox } from '@sberdevices/plasma-ui/utils';\nimport SongCard from './SongCard';\nimport { AppState, appActions } from '../../App/store';\nimport { createAssistant } from '@sberdevices/assistant-client';\n\n\nexport type SongListProps = Readonly<{\n  dispatch: Function;\n  appState: AppState;\n  assistantRef?: ReturnType<typeof createAssistant>\n}>;\n\nexport const SongList = memo((props: SongListProps) => {\n  const { dispatch, appState, assistantRef } = props;\n  const { songs } = appState;\n  const { setSongs } = appActions;\n\n  useEffect(() => {\n    const fetchData = async () => {\n      return await fetchSongList();\n    };\n\n    fetchData()\n      .then(({ data }) => {\n        dispatch(setSongs(data));\n      });\n  }, []);\n\n  const isSberbox = isSberBox();\n  const delay = isSberbox ? 300 : 30;\n  const longDelay = isSberbox ? 1500 : 150;\n  const [index, setIndex] = useRemoteHandlers({\n    initialIndex: 0,\n    axis: 'x',\n    delay,\n    longDelay,\n    min: 0,\n    max: songs.length - 1,\n  });\n\n  const onSongChoose = () => {\n    if (assistantRef) {\n      assistantRef.sendData({ action: { action_id: 'songChosen'}})\n    }\n  }\n\n  return (\n    <Container>\n      <CarouselGridWrapper>\n        <Carousel\n          as={Row}\n          axis=\"x\"\n          index={index}\n          animatedScrollByIndex\n          scrollSnapType=\"proximity\"\n          detectActive\n          detectThreshold={0.5}\n          onIndexChange={(i) => {\n            setIndex(i);\n          }}\n          paddingStart=\"50%\"\n          paddingEnd=\"50%\"\n          style={{ paddingTop: '5rem', paddingBottom: '2rem' }}\n          scrollAlign=\"center\"\n        >\n          {songs.map((song, i) => (\n            <CarouselCol scrollSnapAlign=\"start\" size={4} key={`item:${i}`}>\n              <SongCard\n                index={i + 1}\n                title={song.title}\n                focused={i === index}\n                imageSrc={song.image_link}\n                id={song._id}\n                onSongChoose={onSongChoose}\n              />\n            </CarouselCol>\n          ))}\n        </Carousel>\n      </CarouselGridWrapper>\n    </Container>\n  );\n});\n\nexport default SongList;","import http from './httpClient';\nimport { SongDTO } from '../models/songs';\n\nexport const fetchSongData = (id: string) => {\n  return http.get<SongDTO>(`/songs/${id}`)\n};\n\nexport const fetchSongList = () => {\n  return http.get<Array<SongDTO>>(`/songs`)\n};\n","export default __webpack_public_path__ + \"static/media/volume.c9c7706f.svg\";","import { useEffect } from 'react';\n\nexport const INTER_EVENT_TYPE = 'interaction';\nexport function dispatchInteractionEvent(interaction: { type: string; payload: any; }) {\n  dispatchEvent(\n    new CustomEvent(\n      INTER_EVENT_TYPE,\n      {\n        detail: interaction,\n      },\n    ),\n  );\n}\n\nexport function useInteractionListener(listener: EventListener) {\n  useEffect(() => {\n    window.addEventListener(INTER_EVENT_TYPE, listener);\n    return () => {\n      window.removeEventListener(INTER_EVENT_TYPE, listener);\n    }\n  },[listener]);\n}","import React, { useEffect, useReducer, useRef } from 'react';\nimport RabbitLyrics from 'rabbit-lyrics';\nimport { useParams } from 'react-router';\nimport {\n  Card,\n  CardBody,\n  CardContent,\n  Spinner, Stepper,\n} from '@sberdevices/plasma-ui';\nimport { fetchSongData } from '../../network/apiCalls';\nimport { SongDTO } from '../../models/songs';\nimport { createReducer } from '../../utils/reducer';\nimport './styles.scss';\nimport { AppState } from '../../App/store';\nimport volumeIcon from './assets/volume.svg';\nimport { createAssistant } from '@sberdevices/assistant-client';\nimport { useInteractionListener } from '../../utils/interactionEvent';\n\nexport type SongPageProps = Readonly<{\n  dispatch: Function;\n  appState: AppState;\n  assistantRef?: ReturnType<typeof createAssistant>;\n}>;\nexport type SongPageState = {\n  isLoading: boolean;\n  isPlaying: boolean;\n  song: SongDTO;\n  volume: number;\n};\n\nconst defaultSongFields = {\n  audio_link: '',\n  image_link: '',\n  lyrics: '',\n  title: '',\n  _id: '',\n};\nconst defaultSongPageState = {\n  song: defaultSongFields,\n  isLoading: true,\n  isPlaying: false,\n  volume: 0.5,\n}\n\nconst { actions, reducer } = createReducer<SongPageState>({\n  setSong: (state, payload) => {\n    return {\n      ...state,\n      song: payload,\n    }\n  },\n  setPlayingFlag: (state, payload) => {\n    return {\n      ...state,\n      isPlaying: payload,\n    }\n  },\n  setLoadingFlag: (state, payload) => {\n   return {\n     ...state,\n     isLoading: payload,\n   }\n  },\n  setVolume: (state, payload) => {\n    return {\n      ...state,\n      volume: payload,\n    }\n  },\n});\n\nconst SongPage = (props: SongPageProps) => {\n  const { assistantRef } = props;\n  const { songId } = useParams<{ songId: string }>();\n  const audioRef = useRef<HTMLAudioElement | null>(null);\n  const lyricsRef = useRef<HTMLDivElement | null>(null);\n  const rabbitInst = useRef<any>();\n\n  const { setSong, setPlayingFlag, setLoadingFlag, setVolume } = actions;\n  const [state, dispatch] = useReducer(reducer, defaultSongPageState);\n  const { song, isPlaying, isLoading, volume } = state;\n\n\n  const onPlay = () => {\n    if (audioRef.current) {\n      audioRef.current.play();\n      dispatch(setPlayingFlag(true));\n    }\n  }\n\n  const onPause = () => {\n    if (audioRef.current) {\n      audioRef.current.pause();\n      dispatch(setPlayingFlag(false));\n    }\n  }\n\n  const onVolumeChange = (value: number) => {\n    if (audioRef.current) {\n      const level = value / 10;\n      audioRef.current.volume = level;\n      dispatch(setVolume(level));\n    }\n  }\n  const onSongEnded = () => {\n    dispatch(setPlayingFlag(false));\n    console.log('heeel');\n    if (assistantRef) {\n      console.log('hello');\n      assistantRef.sendData({ action: { action_id: 'songEnded' }});\n    }\n  }\n\n  const playAgainListener = ((event: CustomEvent) => {\n    const { detail: { type } } = event;\n    if (type === 'playAgain') {\n      onPlay();\n    }\n  }) as EventListener;\n  useInteractionListener(playAgainListener);\n\n  useEffect(() => {\n    dispatch(setLoadingFlag(true));\n    const fetchSong = async (): Promise<{ data: SongDTO }> => {\n      return fetchSongData(songId);\n    };\n    fetchSong()\n      .then(({ data }) => {\n        dispatch(setSong(data));\n      })\n      .finally(() => {\n        dispatch(setLoadingFlag(false));\n        onPlay();\n      });\n  }, []);\n\n  const {\n    audio_link,\n    image_link,\n    lyrics,\n  } = song;\n\n  useEffect(() => {\n    if (audioRef.current && lyricsRef.current) {\n      rabbitInst.current = new RabbitLyrics(\n        lyricsRef.current,\n        audioRef.current,\n      );\n      rabbitInst.current.setLyrics(lyrics.replaceAll('\\\\n', '\\n'));\n    }\n  }, [song]);\n\n\n  const imageClickHandler = !isPlaying ? onPlay : onPause;\n  const controlButtonClassName = !isPlaying ? 'play_button' : 'pause_button';\n  const imgBackground = { background: `url(${image_link}) center / cover no-repeat`}\n\n  return (\n    <div className=\"song_page\">\n      { isLoading ? <div className=\"spinner_wrapper\"><Spinner /></div> :\n        <div className=\"controls\">\n          <div className=\"volume\">\n            <Stepper\n              showRemove\n              value={volume * 10}\n              step={1}\n              min={0}\n              max={10}\n              disabled={false}\n              onChange={onVolumeChange}\n              onRemove={() => {}}\n              className=\"volume_control\"\n            />\n            <img className=\"volume_icon\" src={volumeIcon} alt=\"volume\" width={20} height={20} />\n          </div>\n          <Card tabIndex={-1} outlined className=\"image_container\" onClick={imageClickHandler}>\n            <div className=\"song_image\" style={imgBackground} />\n            <div className={controlButtonClassName} />\n          </Card>\n        </div>\n\n      }\n      <Card className=\"lyrics_card\">\n        <CardBody>\n          <CardContent>\n            {audio_link &&\n            <audio id=\"audio-1\" controls ref={audioRef} onEnded={onSongEnded}>\n              <source src={audio_link} type=\"audio/mpeg\" />\n            </audio>\n            }\n            <div id=\"lyrics-1\" className=\"rabbit-lyrics\" data-media=\"#audio-1\" ref={lyricsRef} data-view-mode=\"mini\">\n              {lyrics}\n            </div>\n          </CardContent>\n        </CardBody>\n      </Card>\n    </div>\n  );\n};\n\nSongPage.defaultProps = {};\n\nexport default SongPage;","import React, { useEffect, useReducer, useRef } from 'react';\nimport { Switch, Route, useHistory, useRouteMatch } from 'react-router-dom';\nimport SongList from '../components/SongList';\nimport './App.scss';\nimport SongPage from '../components/SongPage';\nimport { appReducer } from './store';\nimport { AssistantAppState, createAssistant, createSmartappDebugger } from '@sberdevices/assistant-client';\nimport { Container, Header } from '@sberdevices/plasma-ui';\nimport { dispatchInteractionEvent, useInteractionListener } from '../utils/interactionEvent';\n\nconst initializeAssistant = (getState: any) => {\n  if (process.env.NODE_ENV === 'development') {\n    return createSmartappDebugger({\n      token: process.env.REACT_APP_TOKEN ?? '',\n      initPhrase: `Запусти ${process.env.REACT_APP_SMARTAPP}`,\n      getState,\n    });\n  }\n\n  return createAssistant({ getState });\n};\n\n\nfunction App() {\n  const [appState, dispatch] = useReducer(appReducer, { songs: [] });\n  const assistantStateRef = useRef<AssistantAppState>();\n  const assistantRef = useRef<ReturnType<typeof createAssistant>>();\n  const history = useHistory();\n\n  const redirectToSong = (id: string) => {\n    history.push(`/song/${id}`);\n  };\n  const redirectToRoot = () => {\n    history.push('/');\n  };\n  const redirectListener = ((event: CustomEvent) => {\n    const { detail: { type, payload } } = event;\n    if (type === 'chooseSong') {\n      redirectToSong(payload);\n    }\n  }) as EventListener;\n  useEffect(() => {\n    assistantRef.current = initializeAssistant(() => assistantStateRef.current);\n\n    assistantRef.current.on('data', ({ action, interaction, navigation, system }: any) => {\n      if (system?.command === 'BACK') {\n        history.goBack();\n        return;\n      }\n      if (interaction) {\n        dispatchInteractionEvent(interaction);\n        return;\n      }\n      if (action) {\n        dispatch(action);\n      }\n    });\n  }, []);\n\n  useInteractionListener(redirectListener);\n\n  useEffect(() => {\n    assistantStateRef.current = {\n      item_selector: {\n        items: appState.songs.map(({ _id, title }, index) => ({\n          number: index + 1,\n          id: _id,\n          title: `${index + 1}`,\n        })),\n      },\n    };\n  }, [appState]);\n\n  const songPageMatch = useRouteMatch<{ songId: string; }>('/song/:songId');\n  const isSongPage = Boolean(songPageMatch);\n  const songId = songPageMatch?.params?.songId;\n  const headerTitle = appState.songs.find(({ _id }) => _id === songId)?.title;\n  return (\n    <div className=\"App\">\n      <Container className=\"container\">\n        {\n          isSongPage ?\n            <Header back={true} title={headerTitle || 'Песня'} onBackClick={redirectToRoot} /> :\n            <Header back={false} title=\"Караоке\" />\n        }\n        <Switch>\n          <Route path=\"/song/:songId\" component={SongPage}>\n            <SongPage dispatch={dispatch} appState={appState} assistantRef={assistantRef.current} />\n          </Route>\n          <Route path=\"/\" exact component={SongList}>\n            <SongList dispatch={dispatch} appState={appState} assistantRef={assistantRef.current} />\n          </Route>\n        </Switch>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport { createGlobalStyle } from 'styled-components';\nimport { darkSber } from '@sberdevices/plasma-tokens/themes'; // Или один из списка: darkEva, darkJoy, lightEva, lightJoy, lightSber\nimport {\n  text, // Цвет текста\n  background, // Цвет подложки\n  gradient, // Градиент\n} from '@sberdevices/plasma-tokens';\n\nconst DocumentStyle = createGlobalStyle`\n    html:root {\n        min-height: 100vh;\n        color: ${text};\n        background-color: ${background};\n        background-image: ${gradient};\n    }\n`;\nconst ThemeStyle = createGlobalStyle(darkSber);\nexport const GlobalStyle = () => (\n  <>\n    <DocumentStyle />\n    <ThemeStyle />\n  </>\n);\n\nexport default GlobalStyle;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { DeviceThemeProvider } from '@sberdevices/plasma-ui/components/Device'; // Типографика, имеющая размеры, зависимые от типа устройства\nimport { lightJoy } from '@sberdevices/plasma-tokens/themes'; // Или один из списка: darkEva, darkJoy, lightEva, lightJoy, lightSber\nimport { HashRouter } from 'react-router-dom';\nimport App from './App/App';\nimport GlobalStyle from './App/GlobalStyle';\nimport './index.scss';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <DeviceThemeProvider theme={lightJoy}>\n      <GlobalStyle />\n      <HashRouter>\n        <App />\n      </HashRouter>\n    </DeviceThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"song_card\":\"styles_song_card__JdSnD\",\"song_card__img\":\"styles_song_card__img__1-ujY\"};"],"sourceRoot":""}