{"version":3,"sources":["network/httpClient.ts","components/SongList/SongCard.tsx","utils/reducer.ts","App/store.ts","components/SongList/index.tsx","network/apiCalls.ts","components/SongPage/index.tsx","App/App.tsx","App/GlobalStyle.tsx","reportWebVitals.ts","index.tsx","components/SongList/styles.module.scss"],"names":["baseURL","instance","get","url","a","Promise","reject","console","log","this","axios","create","process","SongCard","props","imageSrc","title","focused","id","index","history","useHistory","className","styles","song_card","scaleOnFocus","onClick","push","src","ratio","defaultProps","createReducer","obj","reducerMap","actions","Object","keys","reduce","acc","key","type","payload","reducer","state","action","setSongs","songs","SongList","memo","dispatch","appState","appActions","useEffect","http","fetchData","then","data","isSberbox","isSberBox","delay","longDelay","useRemoteHandlers","initialIndex","axis","min","max","setIndex","as","Row","animatedScrollByIndex","scrollSnapType","detectActive","detectThreshold","onIndexChange","i","paddingStart","paddingEnd","style","paddingTop","paddingBottom","scrollAlign","concat","map","song","scrollSnapAlign","size","image_link","_id","defaultSongPageState","audio_link","lyrics","isLoading","isPlaying","volume","setSong","setPlayingFlag","setLoadingFlag","setVolume","SongPage","songId","useParams","audioRef","useRef","lyricsRef","rabbitInst","useReducer","fetchSong","finally","current","RabbitLyrics","setLyrics","replaceAll","imageClickHandler","pause","play","controlButtonClassName","imgBackground","background","showRemove","value","step","disabled","onChange","level","onRemove","width","height","ref","onEnded","data-media","data-view-mode","App","appReducer","assistantStateRef","assistantRef","getState","createAssistant","on","interaction","system","navigation","command","goBack","item_selector","items","number","songPageMatch","useRouteMatch","isSongPage","Boolean","params","headerTitle","find","back","onBackClick","path","component","exact","DocumentStyle","createGlobalStyle","text","gradient","ThemeStyle","darkSber","GlobalStyle","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","Device","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.635bf588.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios';\n\nexport interface HttpClientI {\n  get: <T>(url: string) => Promise<AxiosResponse<T>>;\n}\n\nexport class HttpClient implements HttpClientI {\n  constructor(baseURL?: string) {\n    console.log('baseURL', baseURL);\n    this.instance = axios.create({ baseURL });\n  }\n  private instance;\n  get = async <T>(url: string): Promise<AxiosResponse<T>> => {\n    try {\n      return await this.instance.get<T>(url);\n    } catch (e) {\n      return Promise.reject();\n    }\n  }\n}\n\nexport default new HttpClient(process.env.REACT_APP_API_URL);\n","import React from 'react';\nimport { Card, CardBody, CardContent, CardMedia, CardHeadline2, Col, CarouselCol } from '@sberdevices/plasma-ui';\nimport { useHistory } from 'react-router-dom';\nimport styles from \"./styles.module.scss\";\nexport type SongCardProps = Readonly<{\n  imageSrc: string;\n  title: string;\n  focused: boolean;\n  id: string;\n  index: number;\n}>;\n\nconst SongCard = (props: SongCardProps) => {\n  const { imageSrc, title, focused, id, index } = props;\n  const history = useHistory();\n  const clickHandler = () => {\n    history.push(`/song/${id}`)\n  }\n  return (\n      <Card focused={focused} className={styles.song_card} scaleOnFocus onClick={clickHandler}>\n        <CardBody>\n          <CardMedia src={imageSrc} ratio=\"1/1\" />\n          <CardContent>\n            <CardHeadline2>\n              {index}.&nbsp;\n              {title}\n            </CardHeadline2>\n          </CardContent>\n        </CardBody>\n      </Card>\n  );\n};\n\nSongCard.defaultProps = {\n\n};\n\nexport default SongCard;","export type ObjectAnyKey = Record<string, any>;\nexport type State<T> = T;\n\nexport type MappedReducer<T> = (state: State<T>, payload: any) => State<T>;\nexport type ReducersMap<T> = {\n  [key: string]: MappedReducer<T>;\n}\n\nexport type ActionCreator = (type: string) => (payload: any) => Action;\nexport type Action = {\n  type: string;\n  payload: any;\n}\nexport type ActionsMap = {\n  [key: string]: (payload: any) => Action;\n}\n\n\nexport type Reducer<T> = (state: State<T>, action: Action) => State<T>;\nexport type CreatedReducers<T> = {\n  reducer: Reducer<T>;\n  actions: ActionsMap,\n}\n\n\n\n\nexport const createAction: ActionCreator = (type: string) => {\n  return (payload) => {\n    return {\n      type,\n      payload,\n    };\n  };\n};\n\n\nexport function createReducer<T>(obj: ReducersMap<T>): CreatedReducers<T> {\n  const reducerMap: ReducersMap<T> = { ...obj };\n  const actionsMap: ActionsMap = Object.keys(reducerMap).reduce((acc, key) => {\n    return {\n      ...acc,\n      [key]: createAction(key),\n    };\n  }, {});\n\n  const reducer = (state: State<T>, action: Action) => {\n    return reducerMap[action.type](state, action.payload);\n  };\n\n  return { actions: actionsMap, reducer };\n}\n\n\n\nexport function setIn<S>(data: S, path: Array<string>, value: any): S | any {\n  let modifiedData;\n  if (Array.isArray(data)) {\n    modifiedData = [...data];\n  } else {\n    modifiedData = { ...data };\n  }\n  let currentItem: any = modifiedData;\n  path.forEach((key, index) => {\n    if (index === path.length - 1) {\n      currentItem[key] = value;\n    } else {\n      if (!currentItem[key]) {\n        currentItem[key] = {};\n      }\n\n      currentItem = currentItem[key];\n    }\n  });\n\n  return modifiedData;\n}\n\nexport function getIn<S>(data: S, path: Array<string>) : any {\n  let modifiedData;\n  if (Array.isArray(data)) {\n    modifiedData = [...data];\n  } else {\n    modifiedData = { ...data };\n  }\n  let currentItem: any = modifiedData;\n  path.forEach((key) => {\n    if (!currentItem[key]) {\n      currentItem = '';\n      return;\n    }\n\n    currentItem = currentItem[key];\n  });\n\n  return currentItem;\n}\n","import { SongDTO } from '../models/songs';\nimport { createReducer } from '../utils/reducer';\n\nexport type AppState = {\n  songs: Array<SongDTO>;\n};\n\nconst { actions, reducer } = createReducer<AppState>({\n  setSongs: (state, payload) => {\n    return {\n      ...state,\n      songs: payload,\n    };\n  }\n});\n\nexport {\n  actions as appActions,\n  reducer as appReducer,\n};","import React, {\n  memo,\n  useEffect,\n} from 'react';\nimport { fetchSongList } from '../../network/apiCalls';\nimport {\n  Carousel,\n  CarouselGridWrapper,\n  Row,\n  Container,\n  useRemoteHandlers,\n  CarouselItem,\n  CarouselCol,\n} from '@sberdevices/plasma-ui';\nimport { isSberBox } from '@sberdevices/plasma-ui/utils';\nimport SongCard from './SongCard';\nimport { AppState, appActions } from '../../App/store';\n\n\nexport type SongListProps = Readonly<{\n  dispatch: Function;\n  appState: AppState;\n}>;\n\nexport const SongList = memo((props: SongListProps) => {\n  const { dispatch, appState } = props;\n  const { songs } = appState;\n  const { setSongs } = appActions;\n\n  useEffect(() => {\n    const fetchData = async () => {\n      return await fetchSongList();\n    };\n\n    fetchData()\n      .then(({ data }) => {\n        dispatch(setSongs(data));\n      });\n  }, []);\n\n  const isSberbox = isSberBox();\n  const delay = isSberbox ? 300 : 30;\n  const longDelay = isSberbox ? 1500 : 150;\n  const [index, setIndex] = useRemoteHandlers({\n    initialIndex: 0,\n    axis: 'x',\n    delay,\n    longDelay,\n    min: 0,\n    // max: songs.length - 1,\n    max: 1,\n  });\n\n  return (\n    <Container>\n      <CarouselGridWrapper>\n        <Carousel\n          as={Row}\n          axis=\"x\"\n          index={index}\n          animatedScrollByIndex\n          scrollSnapType=\"mandatory\"\n          detectActive\n          detectThreshold={0.5}\n          onIndexChange={(i) => {\n            setIndex(i);\n          }}\n          paddingStart=\"50%\"\n          paddingEnd=\"50%\"\n          style={{ paddingTop: '5rem', paddingBottom: '1rem' }}\n          scrollAlign=\"start\"\n        >\n          {songs.concat(songs).map((song, i) => (\n            <CarouselCol scrollSnapAlign=\"start\" size={4}>\n              <SongCard\n                index={i + 1}\n                title={song.title}\n                key={`item:${i}`}\n                focused={i === index}\n                imageSrc={song.image_link}\n                id={song._id}\n              />\n            </CarouselCol>\n          ))}\n        </Carousel>\n      </CarouselGridWrapper>\n    </Container>\n  );\n});\n\nexport default SongList;","import http from './httpClient';\nimport { SongDTO } from '../models/songs';\n\nexport const fetchSongData = (id: string) => {\n  return http.get<SongDTO>(`/songs/${id}`)\n};\n\nexport const fetchSongList = () => {\n  return http.get<Array<SongDTO>>(`/songs`)\n};\n","import React, { useEffect, useReducer, useRef } from 'react';\nimport RabbitLyrics from 'rabbit-lyrics';\nimport { useParams } from 'react-router';\nimport {\n  Card,\n  CardBody,\n  CardContent,\n  Spinner, Stepper,\n} from '@sberdevices/plasma-ui';\nimport { fetchSongData } from '../../network/apiCalls';\nimport { SongDTO } from '../../models/songs';\nimport { createReducer } from '../../utils/reducer';\nimport './styles.scss';\nimport { AppState } from '../../App/store';\n\nexport type SongPageProps = Readonly<{\n  dispatch: Function;\n  appState: AppState;\n}>;\nexport type SongPageState = {\n  isLoading: boolean;\n  isPlaying: boolean;\n  song: SongDTO;\n  volume: number;\n};\n\nconst defaultSongFields = {\n  audio_link: '',\n  image_link: '',\n  lyrics: '',\n  title: '',\n  _id: '',\n};\nconst defaultSongPageState = {\n  song: defaultSongFields,\n  isLoading: true,\n  isPlaying: false,\n  volume: 0.5,\n}\n\nconst { actions, reducer } = createReducer<SongPageState>({\n  setSong: (state, payload) => {\n    return {\n      ...state,\n      song: payload,\n    }\n  },\n  setPlayingFlag: (state, payload) => {\n    return {\n      ...state,\n      isPlaying: payload,\n    }\n  },\n  setLoadingFlag: (state, payload) => {\n   return {\n     ...state,\n     isLoading: payload,\n   }\n  },\n  setVolume: (state, payload) => {\n    return {\n      ...state,\n      volume: payload,\n    }\n  },\n});\n\nconst SongPage = (props: SongPageProps) => {\n  const { songId } = useParams<{ songId: string }>();\n  const audioRef = useRef<HTMLAudioElement | null>(null);\n  const lyricsRef = useRef<HTMLDivElement | null>(null);\n  const rabbitInst = useRef<any>();\n\n  const { setSong, setPlayingFlag, setLoadingFlag, setVolume } = actions;\n  const [state, dispatch] = useReducer(reducer, defaultSongPageState);\n  const { song, isPlaying, isLoading, volume } = state;\n\n  useEffect(() => {\n    dispatch(setLoadingFlag(true));\n    const fetchSong = async (): Promise<{ data: SongDTO }> => {\n      return fetchSongData(songId);\n    };\n    fetchSong()\n      .then(({ data }) => {\n        dispatch(setSong(data));\n      })\n      .finally(() => {\n        dispatch(setLoadingFlag(false));\n      });\n  }, []);\n\n  const {\n    audio_link,\n    image_link,\n    lyrics,\n  } = song;\n\n  useEffect(() => {\n    if (audioRef.current && lyricsRef.current) {\n      rabbitInst.current = new RabbitLyrics(\n        lyricsRef.current,\n        audioRef.current,\n      );\n      rabbitInst.current.setLyrics(lyrics.replaceAll('\\\\n', '\\n'));\n    }\n  }, [song]);\n\n  const onPlay = () => {\n    if (audioRef.current) {\n      audioRef.current.play();\n      dispatch(setPlayingFlag(true));\n    }\n  }\n\n  const onPause = () => {\n    if (audioRef.current) {\n      audioRef.current.pause();\n      dispatch(setPlayingFlag(false));\n    }\n  }\n\n  const onVolumeChange = (value: number) => {\n    if (audioRef.current) {\n      const level = value / 10;\n      audioRef.current.volume = level;\n      dispatch(setVolume(level));\n    }\n  }\n  const onSongEnded = () => {\n    dispatch(setPlayingFlag(false));\n  }\n\n  const imageClickHandler = !isPlaying ? onPlay : onPause;\n  const controlButtonClassName = !isPlaying ? 'play_button' : 'pause_button';\n  const imgBackground = { background: `url(${image_link}) center / cover no-repeat`}\n\n  return (\n    <div className=\"song_page\">\n      { isLoading ? <div className=\"spinner_wrapper\"><Spinner /></div> :\n        <div className=\"controls\">\n          <div className=\"volume\">\n            <Stepper\n              showRemove\n              value={volume * 10}\n              step={1}\n              min={0}\n              max={10}\n              disabled={false}\n              onChange={onVolumeChange}\n              onRemove={() => {}}\n              className=\"volume_control\"\n            />\n            <img className=\"volume_icon\" src=\"/volume.svg\" width={20} height={20} />\n          </div>\n          <div className=\"image_container\" onClick={imageClickHandler}>\n            <div className=\"song_image\" style={imgBackground} />\n            <div className={controlButtonClassName} />\n          </div>\n        </div>\n\n      }\n      <Card className=\"lyrics_card\">\n        <CardBody>\n          <CardContent>\n            {audio_link &&\n            <audio id=\"audio-1\" ref={audioRef} onEnded={onSongEnded}>\n              <source src={audio_link} type=\"audio/mpeg\" />\n            </audio>\n            }\n            <div id=\"lyrics-1\" className=\"rabbit-lyrics\" data-media=\"#audio-1\" ref={lyricsRef} data-view-mode=\"mini\">\n              {lyrics}\n            </div>\n          </CardContent>\n        </CardBody>\n      </Card>\n    </div>\n  );\n};\n\nSongPage.defaultProps = {};\n\nexport default SongPage;","import React, { useEffect, useReducer, useRef } from 'react';\nimport { Switch, Route, useHistory, useRouteMatch, useLocation, useParams, matchPath } from 'react-router-dom';\nimport SongList from '../components/SongList';\nimport './App.scss';\nimport SongPage from '../components/SongPage';\nimport { appReducer } from './store';\nimport { AssistantAppState, createAssistant, createSmartappDebugger } from '@sberdevices/assistant-client';\nimport { Container, Header } from '@sberdevices/plasma-ui';\n\nconst initializeAssistant = (getState: any) => {\n  if (process.env.NODE_ENV === 'development') {\n    return createSmartappDebugger({\n      token: process.env.REACT_APP_TOKEN ?? '',\n      initPhrase: `Запусти ${process.env.REACT_APP_SMARTAPP}`,\n      getState,\n    });\n  }\n\n  return createAssistant({ getState });\n};\n\nfunction App() {\n  const [appState, dispatch] = useReducer(appReducer, { songs: [] });\n  const assistantStateRef = useRef<AssistantAppState>();\n  const assistantRef = useRef<ReturnType<typeof createAssistant>>();\n  const history = useHistory();\n\n  const redirectToSong = (id: string) => {\n    history.push(`/song/${id}`);\n  }\n  const redirectToRoot = () => {\n    history.push('/');\n  }\n  useEffect(() => {\n    assistantRef.current = initializeAssistant(() => assistantStateRef.current);\n\n    assistantRef.current.on('data', ({ action, interaction, navigation, system }: any) => {\n      if (system?.command === 'BACK') {\n        history.goBack();\n      }\n      if (interaction && interaction?.payload) {\n        redirectToSong(interaction.payload);\n        return;\n      }\n      if (action) {\n        dispatch(action);\n      }\n    });\n  }, []);\n\n  useEffect(() => {\n    assistantStateRef.current = {\n      item_selector: {\n        items: appState.songs.map(({ _id, title }, index) => ({\n          number: index + 1,\n          id: _id,\n          title: `${index + 1}`,\n        })),\n      },\n    };\n  }, [appState]);\n\n  const songPageMatch = useRouteMatch<{ songId: string; }>('/song/:songId');\n  const isSongPage = Boolean(songPageMatch)\n  const songId = songPageMatch?.params?.songId;\n  const headerTitle = appState.songs.find(({ _id }) => _id === songId)?.title;\n  return (\n    <div className=\"App\">\n      <Container className=\"container\">\n        {\n          isSongPage ?\n            <Header back={true} title={headerTitle || 'Песня'} onBackClick={redirectToRoot} /> :\n            <Header back={false} title=\"Караоке\"/>\n        }\n        <Switch>\n          <Route path=\"/song/:songId\" component={SongPage}>\n            <SongPage dispatch={dispatch} appState={appState} />\n          </Route>\n          <Route path=\"/\" exact component={SongList}>\n            <SongList dispatch={dispatch} appState={appState} />\n          </Route>\n        </Switch>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport { createGlobalStyle } from 'styled-components';\nimport { darkSber } from '@sberdevices/plasma-tokens/themes'; // Или один из списка: darkEva, darkJoy, lightEva, lightJoy, lightSber\nimport {\n  text, // Цвет текста\n  background, // Цвет подложки\n  gradient, // Градиент\n} from '@sberdevices/plasma-tokens';\n\nconst DocumentStyle = createGlobalStyle`\n    html:root {\n        min-height: 100vh;\n        color: ${text};\n        background-color: ${background};\n        background-image: ${gradient};\n    }\n`;\nconst ThemeStyle = createGlobalStyle(darkSber);\nexport const GlobalStyle = () => (\n  <>\n    <DocumentStyle />\n    <ThemeStyle />\n  </>\n);\n\nexport default GlobalStyle;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { DeviceThemeProvider } from '@sberdevices/plasma-ui/components/Device'; // Типографика, имеющая размеры, зависимые от типа устройства\nimport { lightJoy } from '@sberdevices/plasma-tokens/themes'; // Или один из списка: darkEva, darkJoy, lightEva, lightJoy, lightSber\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App/App';\nimport GlobalStyle from './App/GlobalStyle';\nimport './index.scss';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <DeviceThemeProvider>\n      <GlobalStyle />\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </DeviceThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"song_card\":\"styles_song_card__JdSnD\",\"song_card__img\":\"styles_song_card__img__1-ujY\"};"],"sourceRoot":""}